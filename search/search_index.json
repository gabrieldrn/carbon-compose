{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Carbon Compose is an implementation of the Carbon Design System built  using Kotlin Multiplatform (KMP) and  Compose Multiplatform. This versatile framework is available for the following platforms:</p> <ul> <li>Android</li> <li>iOS</li> <li>Desktop (Windows, Linux, macOS)</li> <li>Web (WasmJs)</li> </ul>"},{"location":"#motivations","title":"Motivations","text":"<p>In evaluating the landscape of open-source design systems for mobile applications, it's evident that there are limited  options \u2014 primarily Material Design for Android and Cupertino for iOS. Introducing more diversity into the developer  community can foster creativity and innovation.</p> <p>This led to the decision to implement the Carbon Design System. Renowned for its simplicity and consistency, Carbon is  an excellent choice for user interfaces that prioritize functionality over aesthetics, such as dashboards, admin panels, and Human-Machine Interfaces (HMI). In contrast,  Material Design may be overly focused on visual elements for such applications.</p> <p>The journey began with Jetpack Compose, and as the project expanded, adopting Compose Multiplatform became a natural  progression. This evolution has culminated in the project becoming open-source, allowing the wider community to benefit from and contribute to its development.</p>"},{"location":"#project-status","title":"Project status","text":"<p>This project is currently a work in progress, with new components and features being implemented as development  continues and new versions are released. The project is currently in its major version <code>0</code>. Once it includes at least as  many components as those documented on the official Carbon Design System website, version <code>1.0.0</code> will be released. As the Carbon Design System continues to evolve under the guidance of IBM's design teams, this Compose Multiplatform adaptation will be updated accordingly over time.</p>"},{"location":"#component-availability-matrix","title":"Component Availability Matrix","text":"<p>List of the currently supported components:</p> <p>\u2705 : Implemented</p> <p>\ud83d\udfe1 : Partially implemented</p> <p>empty : Not implemented</p> Components Android  \ud83e\udd16 iOS  \uf8ff Desktop  \ud83d\udda5\ufe0f wasmJs \ud83c\udf10 Accordion \u2705 \u2705 \u2705 \u2705 AI label Breadcrumb Button \u2705 \u2705 \u2705 \u2705 Checkbox \u2705 \u2705 \u2705 \u2705 Code snippet Contained list Content switcher \u2705 \u2705 \u2705 \u2705 Data table Date picker Dropdown \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 File uploader Form Inline loading Link List Loading \u2705 \u2705 \u2705 \u2705 Menu Menu buttons Modal Notification \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 Number input Pagination Popover Progress bar \u2705 \u2705 \u2705 \u2705 Progress indicator Radio button \u2705 \u2705 \u2705 \u2705 Search Select Slider Structured list Tabs \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 Tags \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 Text input \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 \ud83d\udfe1 Tile Toggle \u2705 \u2705 \u2705 \u2705 Toggletip Tooltip \u2705 \u2705 \u2705 \u2705 Treeview UI shell"},{"location":"components/","title":"Available components","text":"<p>Info</p> <p>Section under construction</p> <p>Warning</p> <p>Only few components with limited implementations are available at the moment</p>"},{"location":"components/#foundation","title":"Foundation","text":"<ul> <li>Themes<ul> <li>White</li> <li>Grey10</li> <li>Grey90</li> <li>Grey100</li> </ul> </li> <li>Typography      (IBM Plex)</li> <li>Layering</li> </ul>"},{"location":"components/#components","title":"Components","text":"<ul> <li>Accordion</li> <li>Button</li> <li>Icon button</li> <li>Checkbox</li> <li>ContentSwitcher</li> <li>Default content switcher</li> <li>Icon content switcher</li> <li>Dropdown<ul> <li>Default dropdown</li> <li>Multi-select dropdown</li> </ul> </li> <li>Loading<ul> <li>Default loading</li> <li>Small loading</li> </ul> </li> <li>Notification<ul> <li>Callout notification</li> <li>Inline notification</li> </ul> </li> <li>Progress bar<ul> <li>Default progress bar</li> <li>Indeterminate progress bar</li> </ul> </li> <li>Radio button</li> <li>Tag<ul> <li>Read-only tag</li> </ul> </li> <li>Text input<ul> <li>Default text input</li> <li>Text area</li> <li>Password input</li> </ul> </li> <li>Toggle<ul> <li>Default toggle</li> <li>Small toggle</li> </ul> </li> <li>Tooltip</li> </ul>"},{"location":"components/#missing-components-size-options","title":"Missing components size options","text":"<p>Some components miss size options depending on the platform.</p> <p>The main reason is due to accessibility. Some platforms recommend a minimum size for touch targets to be easily clickable.</p> <p>In Android and iOS, the recommended minimum touch target size is 48x48dp and 44x44pt respectively. As long as Carbon doesn't have an official documentation over the mobile version, the library will follow each platform's guidelines.</p> <p>Android touch target size iOS UI design</p> <p>For instance, you will see that the Button component is missing the <code>Small</code> and <code>Medium</code> sizes. The dropdown is also missing the <code>Small</code> and <code>Medium</code> sizes.</p> <p>Warning</p> <p>The library still provide sizes for some components that does not comply with accessibility guidelines. They will be  removed until the library reaches the 1.0.0 version. </p>"},{"location":"getting-started/import-lib/","title":"Import Carbon library","text":"<p>To start using Carbon in your Compose app, add the dependency according to your dependencies declaration method:</p> Version catalogKTSGroovy <pre><code>[versions]\ncarbon=&lt;version&gt;\n\n[libraries]\ncarbon-compose = { module = \"io.github.gabrieldrn:carbon\", version.ref = \"carbon\" }\n</code></pre> <pre><code>dependencies {\n    implementation(libs.carbon.compose)\n}\n</code></pre> <p>KMP:</p> <pre><code>kotlin {\n    sourceSets {\n        ...\n        commonMain.dependencies {\n            implementation(libs.carbon.compose)\n        }\n        ...\n    }\n}\n</code></pre> <pre><code>dependencies {\n    implementation(\"io.github.gabrieldrn:carbon:$version\")\n}\n</code></pre> <pre><code>dependencies {\n    implementation \"io.github.gabrieldrn:carbon:$version\"\n}\n</code></pre> <p>You can find the latest version in the releases page.</p>"},{"location":"getting-started/usage/","title":"Using Carbon","text":""},{"location":"getting-started/usage/#theming","title":"Theming","text":"<p>To provide all the necessary resources (such as colors and typography) for creating a UI with Carbon, use the  <code>CarbonDesignSystem</code> root composable at the top of your Compose tree:</p> <p><pre><code>setContent {\n    CarbonDesignSystem {\n        // Your UI content\n    }\n}\n</code></pre> <code>fun CarbonDesignSystem()</code> </p> <p>This will apply the IBM Plex type family to components and set the <code>White</code> and <code>Grey 100</code> themes as the default light  and dark themes, respectively, depending on the theme setting of the current platform.</p>"},{"location":"getting-started/usage/#applying-themes","title":"Applying themes","text":"<p>The Carbon design system provides a set of four themes  to use in your app, <code>White</code>, <code>Grey 10</code>, <code>Grey 90</code> and <code>Grey 100</code>.</p> <p>You can apply these themes using the <code>theme</code> and <code>uiShellInlineTheme</code> arguments of <code>CarbonDesignSystem</code>:</p> <pre><code>CarbonDesignSystem(\n    theme = WhiteTheme,\n    uiShellInlineTheme = Gray100Theme\n) {\n    // Content\n}\n</code></pre> <ul> <li>The <code>theme</code> argument specifies the main Carbon theme to use in regular screens. By default, the composable sets either   the <code>White</code> or <code>Grey 100</code> theme depending on the system's dark mode setting.</li> <li>The <code>uiShellInlineTheme</code> argument defines the    inline theming used by Carbon UI shell    components.</li> </ul> <p>Warning</p> <p>UI shell elements are still a work in progress. However, a UI shell header is available with limited implementation  and documentation.</p>"},{"location":"getting-started/usage/#custom-themes","title":"Custom themes","text":"<p>If needed, you can customize existing themes to your liking, or create new ones.</p> <pre><code>val customTheme1 = WhiteTheme.copy(\n    textPrimary = Color.Magenta\n)\n\nval customTheme2 = Theme(\n    background = Color.Black,\n    ...\n)\n\n@Composable\nfun MyCarbonApp(\n    content: @Composable () -&gt; Unit\n) {\n    CarbonDesignSystem(\n        theme = if (isSystemInDarkTheme()) {\n            customTheme1\n        } else {\n            customTheme2\n        },\n        uiShellInlineTheme = Gray100Theme,\n        content = content\n    )\n}\n</code></pre>"},{"location":"getting-started/usage/#layering","title":"Layering","text":"<p><code>CarbonDesignSystem</code> also offers a <code>layer</code> argument to globally set the  layering token, which maps the layering model  onto components in your content.</p> <pre><code>CarbonDesignSystem(\n    layer = Layer01\n) {\n    // Content\n}\n</code></pre> <p>By setting this, all Carbon components will adjust their colors to follow the specified layer level.</p>"},{"location":"getting-started/usage/#local-layer","title":"Local layer","text":"<p>Some parts of your UI may require a higher layer level. You can use the <code>CarbonLayer</code> composable to apply the next upper layer locally within your compose tree:</p> <p><pre><code>CarbonDesignSystem {\n    // Content on Layer 00\n    CarbonLayer {\n        // Other content what will be on Layer 01\n    }\n}\n</code></pre> <code>fun CarbonLayer()</code> </p>"},{"location":"getting-started/usage/#layer-container-color","title":"Layer Container Color","text":"<p>When working with layers, the background should be adjusted to reflect the corresponding layer.</p> <p>Carbon Compose provides a <code>layerBackground</code> modifier that you can apply to any composable to automatically set the  appropriate background:</p> <p><pre><code>Box(\n    modifier = Modifier\n        .fillMaxSize()\n        .layerBackground()\n) {\n    Button()\n}\n</code></pre> <code>fun Modifier.layerBackground()</code> </p>"},{"location":"getting-started/usage/#typography","title":"Typography","text":"<p>Carbon was designed to work seamlessly with the IBM Plex font family. Carbon Compose  includes and provides access to the <code>TextStyle</code>s that map to all the  type sets in Carbon.</p> <p>You can use the <code>Carbon.typography</code> accessor to apply those styles to your texts:</p> <pre><code>BasicText(\n    text = \"Lorem ipsum\",\n    style = Carbon.typography.bodyCompact01\n)\n</code></pre> <p><code>class CarbonTypography</code> </p>"},{"location":"getting-started/usage/#spacing-scale","title":"Spacing scale","text":"<p>Carbon Compose also provides a spacing scale, as detailed by the spacing tokens. This scale is accessible through the <code>SpacingScale</code> singleton:</p> <pre><code>Box(\n    modifier = Modifier.padding(top = SpacingScale.spacing03)\n)\n</code></pre> <p><code>object SpacingScale</code> </p>"},{"location":"getting-started/usage/#motion","title":"Motion","text":"<p>Carbon provides motion guidelines for its components:</p> <p>Carbon components have motion built in for microinteractions. However, the motion design of the overarching UI \u2014 that  is, how the components interact with each other and enter and exit the page itself \u2014 is up to each product team to  implement. (...)</p> <p>Just like the spacing scale, Carbon Compose provides ready-to-use constants and Bezier curves to implement motion into  your UI:</p> <pre><code>val specFloat = tween&lt;Float&gt;(\n    durationMillis = Motion.Duration.moderate01,\n    easing = Motion.Standard.productiveEasing\n)\n\nval rotation by transition.animateFloat(\n    transitionSpec = { specFloat },\n    label = \"Rotation\"\n) {\n    if (it) 180f else 0f\n}\n</code></pre> <p><code>object Motion</code> </p>"},{"location":"test-utils/","title":"Test utilities","text":"<p>Carbon Compose is built to let you create Carbon-based custom components by providing as much of the foundation elements of the design system, plus a set of APIs and utilities to work with them.</p> <p>In this case, Carbon Compose also provides <code>carbon-test</code>, a separate dependency containing helper  methods to help testing specific aspects of the design system.</p> <p>For instance, the read-only state doesn't exist in Compose, and had to be implemented in the library. To test this state on components, this dependency offers a semantics matcher to let you make assertions on the component's state.</p> <p>Warning</p> <p>Please note that this dependency is meant for testing purposes only. It uses <code>compose-uitest</code> and should only be used in tests source sets.</p>"},{"location":"test-utils/#import","title":"Import","text":"Version catalogKTSGroovy <pre><code>[versions]\ncarbon=&lt;version&gt;\n\n[libraries]\ncarbon-compose-test = { module = \"io.github.gabrieldrn:carbon-test\", version.ref = \"carbon\" }\n</code></pre> <pre><code>dependencies {\n    testImplementation(libs.carbon.compose.test)\n}\n</code></pre> <p>KMP:</p> <pre><code>kotlin {\n    sourceSets {\n        ...\n        commonTest.dependencies {\n            implementation(libs.carbon.compose.test)\n        }\n        ...\n    }\n}\n</code></pre> <pre><code>dependencies {\n    testImplementation(\"io.github.gabrieldrn:carbon-test:$version\")\n}\n</code></pre> <pre><code>dependencies {\n    testImplementation \"io.github.gabrieldrn:carbon-test:$version\"\n}\n</code></pre>"},{"location":"test-utils/#usage","title":"Usage","text":"<p>See the API reference to learn more about the API.</p>"}]}